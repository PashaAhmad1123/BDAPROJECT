{
	"name": "inputData",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText7",
						"type": "DatasetReference"
					},
					"name": "InputFromCSV"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText8",
						"type": "DatasetReference"
					},
					"name": "sinkAllDataCSV"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText9",
						"type": "DatasetReference"
					},
					"name": "clientDimCsvSink"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText11",
						"type": "DatasetReference"
					},
					"name": "VehicleDimCSVsink"
				}
			],
			"transformations": [
				{
					"name": "Transformation"
				},
				{
					"name": "AllDataColumnsCSV"
				},
				{
					"name": "clientDim"
				},
				{
					"name": "VehicleDim"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Entry_Number as string,",
				"          Date as string,",
				"          Make_or_Body_Type as string,",
				"          Model_Designation as string,",
				"          Date_of_Manufacture as string,",
				"          {Reg_No.} as string,",
				"          Odometer_Reading as string,",
				"          {Engine_No.} as string,",
				"          {VIN_or_Chasis_No.} as string,",
				"          Name_of_Person as string,",
				"          Address as string,",
				"          {Lic_or_Id_or_ABN_No.} as string,",
				"          Date_Of_Birth as string,",
				"          Bank_Name as string,",
				"          BSB_Acc as string,",
				"          Amount as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> InputFromCSV",
				"InputFromCSV derive(Amount = iifNull(Amount, \"974.8\", Amount),",
				"          {Lic_or_Id_or_ABN_No.} = iifNull({Lic_or_Id_or_ABN_No.}, \"unknown_0\", {Lic_or_Id_or_ABN_No.}),",
				"          client_key = iifNull(Name_of_Person, \"unknown\", Name_of_Person) +\" \"+ {Lic_or_Id_or_ABN_No.},",
				"          Date = iifNull(Date, \"03/01/2020\", Date),",
				"          Date_of_Manufacture = iifNull(Date_of_Manufacture, \"20\", Date_of_Manufacture),",
				"          Date_key = Date_of_Manufacture + \" \" + Date,",
				"          Vehicle_key = Entry_Number) ~> Transformation",
				"Transformation select(mapColumn(",
				"          Entry_Number,",
				"          Date,",
				"          Make_or_Body_Type,",
				"          Model_Designation,",
				"          Date_of_Manufacture,",
				"          {Reg_No.},",
				"          Odometer_Reading,",
				"          {Engine_No.},",
				"          {VIN_or_Chasis_No.},",
				"          Name_of_Person,",
				"          Address,",
				"          {Lic_or_Id_or_ABN_No.},",
				"          Date_Of_Birth,",
				"          Bank_Name,",
				"          BSB_Acc,",
				"          Amount",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AllDataColumnsCSV",
				"Transformation select(mapColumn(",
				"          Name_of_Person,",
				"          Address,",
				"          {Lic_or_Id_or_ABN_No.},",
				"          Date_Of_Birth,",
				"          client_key",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> clientDim",
				"Transformation select(mapColumn(",
				"          Entry_Number,",
				"          Make_or_Body_Type,",
				"          Model_Designation,",
				"          {Engine_No.},",
				"          {VIN_or_Chasis_No.},",
				"          Vehicle_key",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> VehicleDim",
				"AllDataColumnsCSV sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['allColumnsCSV.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkAllDataCSV",
				"clientDim sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['clientDim.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> clientDimCsvSink",
				"VehicleDim sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['VehicleDim.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> VehicleDimCSVsink"
			]
		}
	}
}